#pragma once

#include "pam_models/hill/contractile_element.hpp"

namespace pam_models
{
namespace hill
{
/**
 * @brief Serial damping element (SDE)
 *
 * Serial damping element (SDE) of the muscle tendon complex (MTC) model.
 *
 * @details The serial damping element produces a viscous damper-like
 *          force with a damping coefficient depending on the muscle
 *          output force.
 */
class SerialDampingElement
{
public:
    SerialDampingElement(const ContractileElement& contractile_element,
                         double MP_SDE_D_SE,
                         double MP_SDE_R_SE);

    /**
     * Returns serial damping force
     *
     * @param F_CE Force generated by contractile element
     * @param F_PEE Force generated by parallel elastic element
     * @param MP_CE_F_max Maximum isometric force
     * @param dot_l_MTC Change of length of muscle unit
     * @param dot_l_CE Change of length of contractile element
     * @return Serial damping force
     */
    double get_force(double F_CE,
                     double F_PEE,
                     double MP_CE_F_max,
                     double dot_l_MTC,
                     double dot_l_CE);

    /**
     * Returns maximum damping coefficient of serial damping element
     *
     * @return Maximum damping coefficient
     * @remark Main purpose of this function is unit testing
     */
    double get_maximum_damping_coefficent() const;

private:
    /**
     * Calculates muscle force based on inital state of MTC unit.
     *
     * @return Muscle force as sum of all individual element forces
     */
    friend double init_muscle_force_equilibrium(double,
                                                const ParallelElasticElement&,
                                                const ContractileElement&,
                                                const SerialElasticElement&,
                                                double,
                                                double);
    friend class Muscle;

    /**
     * Dimensionless factor to scale d_SEmax (Moerl et al., 2012)
     */
    double MP_SDE_D_SE_;

    /**
     * Minimum value of d_SE normalised to d_SEmax (Moerl et al., 2012)
     */
    double MP_SDE_R_SE_;

    /**
     * Maximum value in d_SE in [Ns/m] (Moerl et al., 2012)
     */
    double MP_SDE_d_SEmax_;
};

}  // namespace hill

}  // namespace pam_models