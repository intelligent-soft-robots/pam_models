#pragma once

#include <math.h>
#include "pam_models/hill/contractile_element.hpp"

namespace pam_models
{
namespace hill
{
/**
 * @brief Parallel elastic element (PEE)
 *
 * Parallel elastic element (PEE) of muscle tendon complex (MTC) model.
 */
class ParallelElasticElement
{
public:
    ParallelElasticElement(const ContractileElement& contractile_element,
                           double MP_PEE_L_PEE0,
                           double MP_PEE_v_PEE,
                           double MP_PEE_F_PEE);

    /**
     * Calculates and returns force generated by the parallel elastic element
     * of the muscle unit.
     *
     * @param l_CE Length of contractile element
     * @return Parallel elastic force
     */
    double get_force(double l_CE);

    /**
     * Returns free parameter l of the parallel elastic element of the muscle
     * unit.
     *
     * @return Free parameter l_PEE0
     * @remark Main purpose of this function is unit testing
     */
    double get_l_parameter() const;

    /**
     * Returns free parameter K of the parallel elastic element of the muscle
     * unit.
     *
     * @return Free parameter K_PEE
     * @remark Main purpose of this function is unit testing
     */
    double get_K_parameter() const;

private:
    /**
     * Calculates muscle force based on inital state of MTC unit.
     *
     * @return Muscle force as sum of all individual element forces
     */
    friend double init_muscle_force_equilibrium(double,
                                                const ParallelElasticElement&,
                                                const ContractileElement&,
                                                const SerialElasticElement&,
                                                double,
                                                double);
    friend class Muscle;

    /**
     * Rest length of PEE normalized to optimal lenght of CE (Guenther et al.,
     * 2007)
     */
    double MP_PEE_L_PEE0_;

    /**
     * Exponent of F_PEE (Moerl et al., 2012)
     */
    double MP_PEE_v_PEE_;

    /**
     * Force of PEE if l_CE is stretched to deltaWlimb_des (Moerl et al., 2012)
     */
    double MP_PEE_F_PEE_;

    /**
     * Rest length of PEE (Guenther et al., 2007)
     */
    double MP_PEE_l_PEE0_;

    /**
     * Factor of non-linearity in F_PEE (Guenther et al., 2007)
     */
    double MP_PEE_K_PEE_;
};

}  // namespace hill

}  // namespace pam_models